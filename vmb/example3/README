This directory contains a complete and selfcontained example
of a working configuration.

Configuration:
--------------    
ROM, RAM, Keyboard, Screen, MMIX CPU, Virtual Motherboard
The configuration is described in detail in the file default.mmc,
the configuration file read by all components (except 
the MMIX CPU).

Execution:
----------
Start the example by changing into the example directory
and start the program "mother" by a double click.
The mother program runns with debugging switched on and produces
lengthy accounts of what is going on on the bus.
If you dont like this, you can switch debugging off by closing the debug window.

mother will read deault.mmc and will start
rom, ram. keyboard, screen and mmix.
These programms will in turn read again default.mmc
and connect to the motherboard.
The rom program will in addition load the file bios.img
containing the rom image for the boot rom.

Before the componens become operational you should switch on
the virtual power source by clicking the power button on the
virtual PC.

The only active component is the MMIX CPU.
It will load the MMIX object file hello.mmo into RAM
and start in interactive mode.
You get simple help by typing h as a response to the
mmix> prompt. If you are not interested in mmix,
just type c (continue) and "enter" and the program will run without
further bothering you.
The MMIX CPU boots by executing instructions from
virtual address 0x8000000000000000 which is mapped
to pysical address 0, thats just where the rom is mapped
on the bus. 
It will initialize the machinery and then jump 
to the user program at virtual address #100
(in the text segement mapped to physical address 0x0000000100002100)
there it will load the first 8 byte from the data segement
at virtual address 0x2000000000000000 (mapped to
pysical address 0x0000000100004000). then loads the 
virtual address 0x2000000000000008, where the Text "Hello World!"
is located, it will use an operating system call (implemented in the
rom), to write this text to the screen. Upon return from this
call the user program will call TRAP 0,Halt,0 terminating
the user program and returning the the operating system.
This will also put the MMIX simulator in interactive mode.
Type again "c" and the the enter key to continue.

The operating system will run into an idle loop, waiting for events.
If you select the keyboard with the mouse and type into the keyboard window,
interupts comming from the keyboard will be served by the MMIX CPU
as directed in the bios and input characters from the keyboard
will be copied to the screen. This is a kind of echo funtion.

Instead of typing into the keyboard window, you can also drag and drop
files onto the keyboard. The input characters are then taken form the file.
Input characters are taken from the file as fast as the motherboard fetches them 
from the keyboard. You can switch the output on the screen to hex-mode
using the context menu (right click).

You can interrupt the running MMIX by typing Ctrl-C and
single step through the program by hitting the "enter" key.
You terminate the program by switching off power on the
virtual PC Power button.

If you switch back on power after a power off, it happens
what you should expect to happen. The CPU boots again,
but the jump to the user program will not be successfull,
beacause powering down the ram will have errased the user
program placed there when starting the cpu.

You can modify the source programs
   hello.mms and bios.mms
to produce object files use the mmix assembler mmixal
 run: mmixal bios.mms 
 and: mmixal hello,mms  
this will produce hello.mmo and bios.mmo
To produce the boot image bios.img
you have to run mmoboot on bios.mmo 
 rum: mmoboot bios.mmo
producing bios.img

If you have make (you should) you can remake all files
just by typing make.

The progranms have a context menu opening by clicking
with the right mouse button.

Selecting Exit on the virtual PC will also terminate
all the other programms.






    