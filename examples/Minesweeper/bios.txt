                   %	this is the MMIX BIOS
                   %	it is considert to be the ROM loaded 
                   %	at physical address 0000 0000 0000 0000
                   %	used with 
                   %	virtual address 8000 0000 0000 0000
                   
                   	.section    .text,"ax",@progbits		
                   	LOC	#8000000000000000
                   	
                   % page table setup (see small model in address.howto)
(8000000000000000) Main	IS	@  dummy	%Main, to keep mmixal happy
8000000000000000:  Boot	GETA	$0,DTrap	%set dynamic- and forced-trap  handler
 ...000: f400xxxx
 ...004: f60e0000  	PUT	rTT,$0
 ...008: f400xxxx  	GETA	$0,FTrap
 ...00c: f60d0000  	PUT	rT,$0
 ...010: f200xxxx  	PUSHJ	$0,memory	%initialize the memory setup
 ...014: e3000000          SET	$0,0
 ...018: f6100000  	PUT     rQ,$0		%clear interrupts
                   
                   %	here we start a loaded user program
                   %       rXX should be #FB0000FF = UNSAVE $255
                   %	rBB is coppied to $255, it should be the place in the stack 
                   %	where UNSAVE will find its data
                   %	rWW should be the entry point in the main program, 
                   %	thats where the program
                   %	continues after the UNSAVE.
                   %	If no program is loaded, rXX will be 0, that is TRAP 0,Halt,0
                   %	and we end the program before it has started in the Trap handler.
                   	
 ...01c: 35ff0001  	NEG	$255,1	% enable interrupt $255->rK with resume 1
 ...020: f9000001  	RESUME	1	% loading a file sets up special registers for that
                   
                   	
 ...024: f2ffxxxx  DTrap	PUSHJ	$255,DHandler
 ...028: f60400ff  	PUT	rJ,$255
 ...02c: 35ff0001  	NEG	$255,1		% enable interrupt $255->rK with resume 1
 ...030: f9000001  	RESUME	1
                   	
 ...034: fe000010  DHandler 	GET 	$0,rQ
 ...038: 27010001  		SUBU	$1,$0,1		%from xxx...xxx1000 to xxx...xxx0111
 ...03c: da020100  		SADD	$2,$1,$0	%position of lowest bit
 ...040: ca010001  		ANDN	$1,$0,$1	%the lowest bit
 ...044: ca010001          	ANDN	$1,$0,$1	%delete lowest bit
 ...048: f6100001  		PUT	rQ,$1		%and return to rQ
 ...04c: 3b020202  		SLU	$2,$2,2		%scale
 ...050: f401xxxx          	GETA	$1,DTrapTable	%and jump
 ...054: 9e010102  		GO	$1,$1,$2
                   
                   
 ...058: f0xxxxxx  DTrapTable JMP DTrapUnhandled  %0
 ...05c: f0xxxxxx  	   JMP DTrapUnhandled  %1
 ...060: f0xxxxxx             JMP DTrapUnhandled  %2
 ...064: f0xxxxxx             JMP DTrapUnhandled  %3
 ...068: f0xxxxxx             JMP DTrapPageFault  %4
 ...06c: f0xxxxxx             JMP DTrapUnhandled  %5
 ...070: f0xxxxxx             JMP DTrapUnhandled  %6
 ...074: f0xxxxxx             JMP DTrapUnhandled  %7
 ...078: f0xxxxxx             JMP DTrapUnhandled  %8
 ...07c: f0xxxxxx             JMP DTrapUnhandled  %9
 ...080: f0xxxxxx             JMP DTrapUnhandled  %10
 ...084: f0xxxxxx             JMP DTrapTimer      %11
 ...088: f0xxxxxx             JMP DTrapStep       %12
 ...08c: f0xxxxxx             JMP DTrapStart      %13
 ...090: f0xxxxxx             JMP DTrapStop       %14
 ...094: f0xxxxxx             JMP DTrapHalt       %15
 ...098: f0xxxxxx             JMP DTrapUnhandled  %16
 ...09c: f0xxxxxx             JMP DTrapUnhandled  517
 ...0a0: f0xxxxxx             JMP DTrapUnhandled  %18
 ...0a4: f0xxxxxx             JMP DTrapUnhandled  %19
 ...0a8: f0xxxxxx             JMP DTrapUnhandled  %20
 ...0ac: f0xxxxxx             JMP DTrapUnhandled  %21
 ...0b0: f0xxxxxx             JMP DTrapUnhandled  %22
 ...0b4: f0xxxxxx             JMP DTrapUnhandled  %23
 ...0b8: f0xxxxxx             JMP DTrapUnhandled  %24
 ...0bc: f0xxxxxx             JMP DTrapUnhandled  %25
 ...0c0: f0xxxxxx             JMP DTrapUnhandled  %26
 ...0c4: f0xxxxxx             JMP DTrapUnhandled  %27
 ...0c8: f0xxxxxx             JMP DTrapUnhandled  %28
 ...0cc: f0xxxxxx             JMP DTrapUnhandled  %29
 ...0d0: f0xxxxxx             JMP DTrapUnhandled  %30
 ...0d4: f0xxxxxx             JMP DTrapUnhandled  %31
 ...0d8: f0xxxxxx             JMP DTrapUnhandled  %32
 ...0dc: f0xxxxxx             JMP DTrapUnhandled  %33
 ...0e0: f0xxxxxx             JMP DTrapUnhandled  %34
 ...0e4: f0xxxxxx             JMP DTrapUnhandled  %35
 ...0e8: f0xxxxxx             JMP DTrapUnhandled  %36
 ...0ec: f0xxxxxx             JMP DTrapUnhandled  %37
 ...0f0: f0xxxxxx             JMP DTrapUnhandled  %38
 ...0f4: f0xxxxxx             JMP DTrapUnhandled  %39
 ...0f8: f0xxxxxx             JMP DTrapUnhandled  %40
 ...0fc: f0xxxxxx             JMP DTrapUnhandled  %41
 ...100: f0xxxxxx             JMP DTrapUnhandled  %42
 ...104: f0xxxxxx             JMP DTrapUnhandled  %43
 ...108: f0xxxxxx             JMP DTrapUnhandled  %44
 ...10c: f0xxxxxx             JMP DTrapUnhandled  %45
 ...110: f0xxxxxx             JMP DTrapUnhandled  %46
 ...114: f0xxxxxx             JMP DTrapUnhandled  %47
 ...118: f0xxxxxx             JMP DTrapUnhandled  %48
 ...11c: f0xxxxxx             JMP DTrapUnhandled  %49
 ...120: f0xxxxxx             JMP DTrapUnhandled  %50
 ...124: f0xxxxxx             JMP DTrapUnhandled  %51
 ...128: f0xxxxxx             JMP DTrapUnhandled  %52
 ...12c: f0xxxxxx             JMP DTrapUnhandled  %53
 ...130: f0xxxxxx             JMP DTrapUnhandled  %54
 ...134: f0xxxxxx             JMP DTrapUnhandled  %55
 ...138: f0xxxxxx             JMP DTrapUnhandled  %56
 ...13c: f0xxxxxx             JMP DTrapUnhandled  %57
 ...140: f0xxxxxx             JMP DTrapUnhandled  %58
 ...144: f0xxxxxx             JMP DTrapUnhandled  %59
 ...148: f0xxxxxx             JMP DTrapUnhandled  %60
 ...14c: f0xxxxxx             JMP DTrapUnhandled  %61
 ...150: f0xxxxxx             JMP DTrapUnhandled  %62
 ...154: f0xxxxxx             JMP DTrapUnhandled  %63
 ...158: f8000000             POP 0,0		   %64  rQ was zero
                   
                   
                   
 ...15c: e0008003  DTrapStart	SETH	$0,#8003	% timer address
 ...160: e30103e8  		SET	$1,1000		%1000 ms
 ...164: e90103e8  		ORMH	$1,1000
 ...168: ad010010  		STO	$1,$0,#10		%enable timer interrupts
 ...16c: f8000000  		POP 0,0
                   
 ...170: e0008003  DTrapStop	SETH	$0,#8003	% timer address
 ...174: e3010000  		SET	$1,0		% 
 ...178: ad010010  		STO	$1,$0,#10		%disable timer interrupts
 ...17c: f8000000  		POP 0,0
 ...180: e0018000  DTrapTimer	SETH	$1,#8000
 ...184: e9010001  		ORMH	$1,#0001	%$1 now points to the first byte in ram	
 ...188: e3000001  		SET	$0,1
 ...18c: ad000110  		STO	$0,$1,16	% third octa is the step flag
 ...190: f8000000  		POP	0,0
                   
 ...194: e0018000  DTrapStep	SETH	$1,#8000
 ...198: e9010001  		ORMH	$1,#0001	%$1 now points to the first byte in ram	
 ...19c: e3000001  		SET	$0,1
 ...1a0: ad000110  		STO	$0,$1,16	% third octa is the step flag
 ...1a4: f8000000  		POP	0,0
                   
 ...1a8: e0018000  DTrapHalt	SETH	$1,#8000
 ...1ac: e9010001  		ORMH	$1,#0001	%$1 now points to the first byte in ram	
 ...1b0: e3000001  		SET	$0,1
 ...1b4: ad000108  		STO	$0,$1,8		% second octa is the terminate flag
 ...1b8: f8000000  		POP	0,0
                   				
 ...1bc: f400xxxx  DTrapUnhandled	GETA	$0,1F
 ...1c0: fd000005  		SWYM	$0,5               % inform the debugger
 ...1c4: f8000000  		POP	0,0
 ...1c8: 44454255  1H		BYTE	"DEBUG Unhandled Interrupt",0
 ...1cc: 4720556e
 ...1d0: 68616e64
 ...1d4: 6c656420
 ...1d8: 496e7465
 ...1dc: 72727570
 ...1e0: 7400    
                   
                   
                   		
                    
                   %	Entry point for a forced TRAP
 ...1e4: f2ffxxxx  FTrap	PUSHJ	$255,FHandler
 ...1e8: f60400ff  	PUT	rJ,$255
 ...1ec: 35ff0001  	NEG	$255,1	  %enable interrupt $255->rK with resume 1
 ...1f0: f9000001  	RESUME	1
                   
 ...1f4: fe00001d  FHandler	GET	$0,rXX
 ...1f8: 4800xxxx  		BNN	$0,Ropcode
 ...1fc: 3f010018  		SRU	$1,$0,24       
 ...200: c90101ff  		AND	$1,$1,#FF	%the opcode
 ...204: 4201xxxx  		BZ	$1,Trap		
                   
 ...208: f8000000  		POP	0,0		%not a TRAP and ropcode<0
                          
 ...20c: 3f000038  Ropcode	SRU	$0,$0,56		%the ropcode
 ...210: 4200xxxx  	BZ	$0,DTrapPageFault	%0 means page fault
 ...214: 25010002  	SUB	$1,$0,2         
 ...218: 4201xxxx  	BZ      $1,Emulate		%2 means emulate the instruction
 ...21c: 31010003  	CMP	$1,$0,3	        
 ...220: 4201xxxx  	BZ	$1,Virtual	%page table translation in software
                   
 ...224: f8000000  	POP     0,0             %ignore the rest
                   
                   
                   	
                   %       Emulate the instruction
 ...228: f8000000  Emulate POP     0,0		%not implemented
                   
                   
                   %	Do pagetable translation in software
 ...22c: e3001230  Virtual SET	$0,#1230         %the dummy physical address
 ...230: f61f0000  	PUT	rZZ,$0
 ...234: f8000000  	POP     0,0
                   
                   %       Handle a forced Trap
 ...238: f402xxxx  Trap    GETA	$2,FTrapTable
 ...23c: 3f010008  	SRU	$1,$0,8
 ...240: c90101ff  	AND	$1,$1,#FF		%the Y value (the function code)
 ...244: 3103011f          CMP     $3,$1,#1F
 ...248: 4403xxxx  	BP	$3,TrapUnhandled	% in the moment we handle only very few Traps
 ...24c: c901011f  	AND	$1,$1,#1F    
 ...250: 39010102  	SL	$1,$1,2
 ...254: 9e020201  1H	GO	$2,$2,$1		%Jump into the Trap Table
                   	
 ...258: f0xxxxxx  FTrapTable JMP   TrapHalt      %0
 ...25c: f0xxxxxx  	  JMP   TrapUnhandled  %1
 ...260: f0xxxxxx  	  JMP   TrapUnhandled  %2
 ...264: f0xxxxxx  	  JMP   TrapUnhandled  %3
 ...268: f0xxxxxx  	  JMP   TrapUnhandled  %4
 ...26c: f0xxxxxx  	  JMP   TrapUnhandled  %5
 ...270: f0xxxxxx  	  JMP   TrapUnhandled  %6
 ...274: f0xxxxxx  	  JMP   TrapUnhandled  %7 
 ...278: f0xxxxxx  	  JMP   TrapUnhandled  %8
 ...27c: f0xxxxxx  	  JMP   TrapUnhandled  %9
 ...280: f0xxxxxx  	  JMP   TrapUnhandled  %a
 ...284: f0xxxxxx  	  JMP   TrapUnhandled  %b
 ...288: f0xxxxxx  	  JMP   TrapUnhandled  %c
 ...28c: f0xxxxxx  	  JMP   TrapUnhandled  %d
 ...290: f0xxxxxx  	  JMP   TrapUnhandled  %e
 ...294: f0xxxxxx  	  JMP   TrapUnhandled  %f
 ...298: f0xxxxxx  	  JMP   TrapGPutPixel %10
 ...29c: f0xxxxxx  	  JMP   TrapTWait     %11
 ...2a0: f0xxxxxx  	  JMP   TrapUnhandled %12
 ...2a4: f0xxxxxx  	  JMP   TrapUnhandled %13
 ...2a8: f0xxxxxx  	  JMP   TrapUnhandled %14
 ...2ac: f0xxxxxx  	  JMP   TrapUnhandled %15
 ...2b0: f0xxxxxx  	  JMP   TrapUnhandled %16
 ...2b4: f0xxxxxx  	  JMP   TrapUnhandled %17
 ...2b8: f0xxxxxx  	  JMP   TrapUnhandled %18
 ...2bc: f0xxxxxx  	  JMP   TrapUnhandled %19
 ...2c0: f0xxxxxx  	  JMP   TrapUnhandled %1a
 ...2c4: f0xxxxxx  	  JMP   TrapUnhandled %1b
 ...2c8: f0xxxxxx  	  JMP   TrapUnhandled %1c
 ...2cc: f0xxxxxx  	  JMP   TrapUnhandled %1d
 ...2d0: f0xxxxxx  	  JMP   TrapUnhandled %1e
 ...2d4: f0xxxxxx  	  JMP   TrapUnhandled %1f
                   
                   %         The individual Trap routines
                   
 ...2d8: f400xxxx  TrapHalt	GETA	$0,2F
 ...2dc: fd000005  		SWYM	$0,5		% tell the debugger
 ...2e0: 35000001  		NEG	$0,1            % enable interrupts
 ...2e4: f60f0000    		PUT	rK,$0
 ...2e8: fc000004  1H		SYNC	4		% go to power save mode
 ...2ec: f1ffffff  		JMP	1B              % and loop idle
 ...2f0: 44454255  2H		BYTE	"DEBUG Program terminated",0		
 ...2f4: 47205072
 ...2f8: 6f677261
 ...2fc: 6d207465
 ...300: 726d696e
 ...304: 61746564
 ...308: 00      
                   
                   
                   
                   %		Put one pixel on the graphics display. 
                   %		In $255 we havein the Hi 32 bit the offset
                   %               and in the low 24 bit the RGB value 
 ...30c: fe000007  TrapGPutPixel GET	$0,rBB		%get the $255 parameter: address and RGB
 ...310: 3f010020  	      SRU       $1,$0,32	%offset
 ...314: e0028002                SETH      $2,#8002	%base address of vram
 ...318: aa000201                STTU      $0,$2,$1
 ...31c: f7070000                PUT	rBB,0		%the result is returned with resume 1
 ...320: f8000000  	      POP	0,0
                   
                   
 ...324: fc000004  1H		SYNC	4		% go to power save mode
 ...328: fe000004  		GET	$0,rJ
 ...32c: f301ff42  		PUSHJ	$1,DHandler     % handle interrupts
 ...330: f6040000  		PUT	rJ,$0
 ...334: e0018000  TrapTWait	SETH	$1,#8000
 ...338: e9010001  		ORMH	$1,#0001	%$= now points to the first byte in ram	
 ...33c: 8d000108  		LDO	$0,$1,8		% second octa is our terminate flag
 ...340: 4a00xxxx  		BNZ	$0,2F
 ...344: 8d000110  		LDO	$0,$1,16	% third octa is the step flag
 ...348: 4300fff7  		BZ	$0,1B		% wait more
 ...34c: e3000000  		SET	$0,0
 ...350: ad000110  		STO	$0,$1,16	% reset step flag
 ...354: f7070001  		PUT	rBB,1		%the result 1 is returned with resume 1	
 ...358: f8000000  		POP	0,0
                   
 ...35c: fe000004  2H		GET	$0,rJ
 ...360: f301ff84  		PUSHJ	$1,DTrapStop
 ...364: f6040000  		PUT	rJ,$0
 ...368: f7070000  		PUT	rBB,0		%the result 0 is returned with resume 1	
 ...36c: f8000000  		POP	0,0
                   
                   
 ...370: f400xxxx  TrapUnhandled	GETA	$0,1F
 ...374: fd000005  		SWYM	$0,5		% tell the debugger
 ...378: f8000000  		POP	0,0
 ...37c: 44454255  1H		BYTE	"DEBUG Unhandled TRAP",0		
 ...380: 4720556e
 ...384: 68616e64
 ...388: 6c656420
 ...38c: 54524150
 ...390: 00      
                   
                   
                   %       The ROM Page Table
                   %       the table maps each segement with up to 1024 pages
                   %	currently, the first page is system rom, the next four pages are for
                   %       text, data, pool, and stack. then there is mor bios code.
                   %       The page tables imply the following RAM Layout
                   
                   %	The RAM Layout
                   
                   %       the ram layout uses the small memmory model (see memory.howto)
                   %       8000000100000000    first page for OS, layout see below
                   %       Next the  pages for the user programm
                   
                   
                   %       free space starts at 8000000100032000
                   
                   	LOC	#8000000000002000	%The start is fixed in mmix-sim.ch
                   %       Text Segment 10 pages = 80kByte
8000000000002000:  PageTab OCTA	#0000000100002007	%text, should be ...001 for execute only
 ...000: 00000001
 ...004: 00002007
 ...008: 00000001     	OCTA	#0000000100004007 
 ...00c: 00004007
 ...010: 00000001     	OCTA	#0000000100006007 
 ...014: 00006007
 ...018: 00000001     	OCTA	#0000000100008007 
 ...01c: 00008007
 ...020: 00000001     	OCTA	#000000010000a007 
 ...024: 0000a007
 ...028: 00000001     	OCTA	#000000010000c007 
 ...02c: 0000c007
 ...030: 00000001     	OCTA	#000000010000e007 
 ...034: 0000e007
 ...038: 00000001     	OCTA	#0000000100010007
 ...03c: 00010007
 ...040: 00000001     	OCTA	#0000000100012007
 ...044: 00012007
 ...048: 00000001     	OCTA	#0000000100014007
 ...04c: 00014007
 ...050: 00000001  	OCTA	#0000000100016007 
 ...054: 00016007
 ...058: 00000001  	OCTA	#0000000100018007  
 ...05c: 00018007
                      	 
                   %       Data Segment 8 pages = 80 kByte
                   	LOC     (@&~#1FFF)+#2000	%data
8000000000004000:  	OCTA	#000000010001a006  
 ...000: 00000001
 ...004: 0001a006
 ...008: 00000001  	OCTA	#000000010001c006  
 ...00c: 0001c006
 ...010: 00000001  	OCTA	#000000010001e006  
 ...014: 0001e006
 ...018: 00000001  	OCTA	#0000000100020006  
 ...01c: 00020006
 ...020: 00000001  	OCTA	#0000000100022006  
 ...024: 00022006
 ...028: 00000001  	OCTA	#0000000100024006  
 ...02c: 00024006
 ...030: 00000001  	OCTA	#0000000100026006  
 ...034: 00026006
 ...038: 00000001  	OCTA	#0000000100028006  
 ...03c: 00028006
                   
                   %	Pool Segment 2 pages = 16 kByte
                   	LOC	(@&~#1FFF)+#2000
8000000000006000:  	OCTA	#000000010002a006	%pool
 ...000: 00000001
 ...004: 0002a006
 ...008: 00000001  	OCTA	#000000010002c006  
 ...00c: 0002c006
                   	
                   %	Stack Segment 2+2 pages = 32 kByte
                   	LOC	(@&~#1FFF)+#2000
8000000000008000:  	OCTA	#000000010002e006	%stack
 ...000: 00000001
 ...004: 0002e006
 ...008: 00000001  	OCTA	#0000000100030006  
 ...00c: 00030006
                   
                   	LOC	(@&~#1FFF)+#2000-2*8	
8000000000009ff0:  	OCTA	#0000000100032006       %gcc memory stack < #6000000000800000
 ...ff0: 00000001
 ...ff4: 00032006
 ...ff8: 00000001  	OCTA	#0000000100034006  
 ...ffc: 00034006
                   
                   	LOC	(@&~#1FFF)+#2000
                   	
                   
                   %       initialize the memory management
800000000000c000:  memory	SETH    $0,#1234	%set rV register
 ...000: e0001234
 ...004: e9000d00  	ORMH    $0,#0D00      
 ...008: ea000000  	ORML    $0,#0000
 ...00c: eb002000  	ORL     $0,#2000
 ...010: f6120000  	PUT	rV,$0
                   
 ...014: e0008000  	SETH    $0,#8000       %$0 physical address of RAM
 ...018: e9000001          ORMH    $0,#0001 
                           
 ...01c: c1010000          SET	$1,$0
 ...020: ea010003  	ORML	$1,#0003
 ...024: eb018000          ORL     $1,#8000       %address of first empty page
 ...028: ad010000  	STO	$1,$0,0        %initialize FreeSpace
 ...02c: e3010000          SET	$1,0
 ...030: ad010008          STO	$1,$0,#8	%initialize ScreenBufferStart 
 ...034: ad010010          STO	$1,$0,#10	%initialize ScreenBufferEnd
 ...038: f8000000  	POP     0,0
                   
                   %       TRAP handler for page faults (not yet implemented)       	
 ...03c: f400xxxx  DTrapPageFault	GETA	$0,1F
 ...040: fd000005  		SWYM	$0,5		% tell the debugger
 ...044: f8000000  		POP	0,0
 ...048: 44454255  1H		BYTE	"DEBUG Unhandled Page Fault",0	
 ...04c: 4720556e
 ...050: 68616e64
 ...054: 6c656420
 ...058: 50616765
 ...05c: 20466175
 ...060: 6c7400  
                          
                   
                   %	First Page in RAM: reserved for the OS.
                   %	The layout follows below.
                   %	  .section	.bss,"aw",@nobits
                   %	  .global	FreeSpace
                   % RAMSTART    LOC	#8000000100000000
                   
                   %FreeSpace		OCTA 0              %First page is for OS
                   %ScreenBufferStart	OCTA 0
                   %ScreenBufferEnd	OCTA 0
                   %ScreenBuffer		BYTE 0      255 Byte of screen Buffer
                   %			LOC	@+#FF
                   	

Symbol table:
 Boot = #8000000000000000 (3)
 DHandler = #8000000000000034 (6)
 DTrap = #8000000000000024 (2)
 DTrapHalt = #80000000000001a8 (14)
 DTrapPageFault = #800000000000c03c (9)
 DTrapStart = #800000000000015c (12)
 DTrapStep = #8000000000000194 (11)
 DTrapStop = #8000000000000170 (13)
 DTrapTable = #8000000000000058 (7)
 DTrapTimer = #8000000000000180 (10)
 DTrapUnhandled = #80000000000001bc (8)
 Emulate = #8000000000000228 (18)
 FHandler = #80000000000001f4 (15)
 FTrap = #80000000000001e4 (4)
 FTrapTable = #8000000000000258 (20)
 Main = #8000000000000000 (1)
 PageTab = #8000000000002000 (25)
 Ropcode = #800000000000020c (16)
 Trap = #8000000000000238 (17)
 TrapGPutPixel = #800000000000030c (23)
 TrapHalt = #80000000000002d8 (22)
 TrapTWait = #8000000000000334 (24)
 TrapUnhandled = #8000000000000370 (21)
 Virtual = #800000000000022c (19)
 memory = #800000000000c000 (5)
